<?php
// $Id$

/**
* Implementation of hook_menu().
*/
function gss_menu() {
  $items = array();
  
  $items['admin/settings/gss'] = array(
    'title' => 'Google Site Search',
    'description' => 'Google Site Search settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gss_settings'),
    'access arguments' => array('administer site settings'),
  );
  
//  $items['search/gss'] = array(
//    'title' => t('Search'),
//    'page callback' => 'gss_view',
//    'access arguments' => array('access content'),
//    'type' => MENU_CALLBACK,
//  );
//  
//  $items['search/gss/%'] = array(
//    'title' => t('Search results'),
//    'page callback' => 'gss_search_results',
//    'page arguments' => array(1),
//    'access arguments' => array('access content'),
//    'type' => MENU_CALLBACK,
//  );
  
  return $items;
}
/**
 * Implements hook_theme().
 */
function gss_theme($existing, $type, $theme, $path) {
  return array(
    'gss_result' => array(
      'arguments' => array('result' => NULL, 'module' => NULL),
      'file' => 'gss.theme.inc',
      'template' => 'gss-result',
    ),
    'gss_results' => array(
      'arguments' => array('results' => NULL, 'module' => NULL),
      'file' => 'gss.theme.inc',
      'template' => 'gss-results',
    ),
  );
}
/**
* Module settings.
*/
function gss_settings() {
  $form = array();
  
  $form['gss_api_key'] = array(
    '#title' => t('API Key'),
    '#type' => 'textfield',
    '#description' => t('Your Google Site Search API key.'),
    '#default_value' => variable_get('gss_api_key', ''),
    '#required' => TRUE,
  );
  
  $form['gss_page_size'] = array(
    '#title' => t('Page size'),
    '#type' => 'textfield',
    '#description' => t('Number of results to display per page.'),
    '#default_value' => variable_get('gss_page_size', 20),
    '#size' => 5,
    '#max_length' => 5,
  );
  $form['gss_results_tab'] = array(
    '#title' => t('Search results tab name'),
    '#type' => 'textfield',
    '#maxlength' => 50,
    '#size' => 60,
    '#description' => t('Enter a custom name of the tab where search results are displayed (defaults to %google).', array('%google' => t('Google Search'))),
    '#default_value' => variable_get('gss_results_tab', ''),
  );
  
  return system_settings_form($form);
}

/**
* Implementation of hook_block().
*/
function gss_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0] = array(
      'info' => t('Google Site Search'),
      'weight' => 0,
      'status' => 0,
    );

    return $blocks;
  }
  else if ($op == 'view') {
    $block = array(
      'subject' => t('Search'),
      'content' => drupal_get_form('gss_search_form'),
    );

    return $block;
  }
}
/**
* Search results page.
*/
function gss_search_results($query) {
  // Include dependencies.
  module_load_include('inc', 'gss', 'includes/GoogleSiteSearch');
  // Make query safe.
  $query = check_plain($query);
  // Init GoogleSiteSearch object.
  $gss = new GoogleSiteSearch($query, variable_get('gss_api_key', ''));
  // Get current page.
  $page = isset($_GET['page']) ? intval($_GET['page']) : 1;
  // Init results variable.
  $results = null;
  // Set the number of results per page.
  $gss->SetPageSize(variable_get('gss_page_size', 20));
  // Perform search.
  try {
    $results = $gss->GetSearchResults($page);
  }
  catch(Exception $e) {
     watchdog('gss', $e, NULL, WATCHDOG_ERROR);
     drupal_set_message(t('Sorry, the search function is unavailable at this time.'));
     exit();
  }
  // Get search summary.
  $total_results = $gss->GetTotalResults();
  $end_pos = $gss->GetCurrentPage() * $gss->GetPageSize();
  $start_pos = $end_pos - $gss->GetPageSize() + 1;
  
  if ($end_pos > $total_results) {
    $end_pos = $total_results;
  }
  // Build output.
  if (!empty($results)) {
    $output = array();
    // Loop results.
    foreach ($results as $result) {
      $output[] = array(
        'link' => urldecode($result['url']),
        'title' => $result['title'],
        'snippet' => $result['description'],
        );
    }
  }
  else {
    $output[] = array(
        'link' => '',
        'title' => '',
        'snippet' => t('No results'),
        );
  }
  // Get searrch head
  $output['head'] = $gss->GetSearchHead();
  // Get pager
  $output['pager'] = $gss->GetPager();
  
  return $output;
}
/**
* Get class names for result item.
*/
function _gss_get_link_class($result) {
  $file_types = array('pdf', 'doc', 'docx', 'ppt', 'pptx', 'odt');
  $file = basename($result['url']);
  $ext = drupal_strtolower(substr($file, strrpos($file, '.') + 1));
  if (in_array($ext, $file_types)) {
    return 'filetype-'. $ext;
  }
  else {
    return 'filetype-page';
  }
}



/**
 * Search conditions callback.
 */
function gss_conditions_callback($keys) {
  $conditions = array();
  return $conditions;
}
/**
 * Return the Google Site Search tab title, either a setting or a translation.
 */
//function gss_results_tab() {
//  return ($var = variable_get('gss_results_tab', '')) ? $var : t('Google Search');
//}

/**
 * Returns an array of any advanced settings which have been set.
 */
function gss_advanced_settings() {
  global $language;
  $settings = array();
  foreach (array('cr', 'gl', 'hl', 'ie', 'lr', 'oe', 'safe') as $parameter) {
    if ($setting = variable_get("gss_$parameter", '')) {
      $settings[$parameter] = $setting;
    }
  }
  if (variable_get('gss_locale_hl', '')) {
    $settings['hl'] = $language->language;
  }
  if (variable_get('gss_locale_lr', '')) {
    $settings['lr'] = 'lang_'. $language->language;
  }
  return $settings;
}
/**
 * Builds a query array based on Google Site Search settings.
 */
function gss_build_query($keys, $sitesearch = NULL, $here = TRUE) {
  return array(
    'query' => $keys,
    'cx' => variable_get('gss_api_key', ''),
    'cof' => $here ? variable_get('gss_cof_here', 'FORID:11') : variable_get('gss_cof_google', 'FORID:0'),
    'sitesearch' => isset($sitesearch) ? $sitesearch : '',
  ) + gss_advanced_settings();
}
/**
 * Adds custom submit handler for search form.
 */
function gss_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'search_form' || $form_id == 'search_block_form' || $form_id == 'search_theme_form') {
    if (variable_get('gss_results_gadget', 1)) {
      $form['basic']['op']['#suffix'] = theme('gss_results_gadget');
    }
    $form['#submit'][] = 'gss_search_form_submit';
    $form['#attributes']['class'] = 'gss';
  }
}

/**
 * Implementation of hook_search().
 */
function gss_search($op = 'search', $keys = NULL) {
  switch ($op) {
    case 'name':
      return t('Google Search');
      break;

    case 'search':
      $page = isset($_GET['page']) ? $_GET['page'] : 0;
      $query = gss_build_query($keys);
      return gss_search_results($keys);      
      break;
  }
}

/**
* Submit handler.
*/
function gss_search_form_submit($form, &$form_state) {
  
  $form_id = $form_state['values']['form_id'];
  
  $keys = $form_state['values'][$form_id];
  

  if (!$keys) {
    
    $keys = $form_state['values']['processed_keys'];
  }
  
  
//  $sitesearch = isset($form_state['values']['sitesearch']) ? $form_state['values']['sitesearch'] : NULL;
  $form_state['redirect'] = array('search/gss/'. $keys);
}


/**
 * Implementation of hook_search_page().
 */
function gss_search_page($results) {
  return theme('gss_results', $results);
}


/**
 * Implementation of hook_menu_alter().
 */
function gss_menu_alter(&$menu) {
  
  
  if (isset($menu['search/gss/%menu_tail'])) {
//    $menu['search']['page callback'] = 'gss_view';
//    $menu['search/gss/%menu_tail']['page callback'] = 'gss_view';
  }

//  print_r($menu);
  
}


/**
 * Re-implementation of search_view().
 */
//function gss_view($type = NULL) {
//  if (empty($type)) {
//    // Note: search/X can not be a default tab because it would take on the
//    // path of its parent (search). It would prevent remembering keywords when
//    // switching tabs. This is why we drupal_goto to it from the parent instead.
//    drupal_goto('search/gss');
//  }
//}




